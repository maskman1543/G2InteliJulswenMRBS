@model IEnumerable<ASI.Basecode.Services.ServiceModels.BookingViewModel>

@{
    ViewData["Title"] = "ViewBooking";
    Context.Session.SetString("IsViewBookingActive", "true");
    Pager pager = new Pager();

    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
}

<div class="booking-list-container p-4 rounded" style="background-color: #E2CD79;">
    <div class="d-flex align-items-center mb-3">
        <h1 class="me-3">Booking List</h1>

    </div>

    <!-- Modal container where modal content will be dynamically loaded -->
    <div id="bookingModalContainer"></div>

    <table class="table" style="background-color: #F3E5AB; border-radius: 10px; overflow: hidden;">
        <thead style="background-color: #E2CD79;">
            <tr>
                <th>Room Name</th>
                <th>Start Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Purpose</th>
                <th>Status</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var item in Model)
                {
                    <tr style="background-color: #F3E5AB;">
                        <td>@Html.DisplayFor(modelItem => item.RoomName)</td>
                        <td>@item.StartDate.ToString("dd-MM-yyyy")</td>
                        <td>@item.StartTime.Hours.ToString("D2"):@item.StartTime.Minutes.ToString("D2")</td>
                        <td>@item.EndTime.Hours.ToString("D2"):@item.EndTime.Minutes.ToString("D2")</td>
                        <td>@Html.DisplayFor(modelItem => item.Purpose)</td>
                        <td>@Html.DisplayFor(modelItem => item.Status)</td>
                        <td class="text-center">
                            <!-- Edit Button -->
                            <button type="button" class="btn btn-primary loadEditBookingModal" data-booking-id="@item.BookingId">
                                <i class="bi bi-pencil"></i> Edit
                            </button>

                            <!-- Cancel Button -->
                            <button type="button" class="btn btn-danger loadDeleteBookingModal" data-booking-id="@item.BookingId">
                                <i class="fa-solid fa-trash"></i> Delete
                            </button>
                        </td>
                    </tr>

                }
            }
            else
            {
                <tr style="background-color: #F3E5AB;">
                    <td colspan="6" class="text-center">No Booking found.</td>
                </tr>
            }
        </tbody>

    </table>
    <div class="pagination">
        @if (pager.TotalPages > 0)
        {
            <ul class="pagination justify-content-end">
                @if (pager.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-controller="BookingUser" asp-action="ViewBooking" asp-route-pg="1">First</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" asp-controller="BookingUser" asp-action="ViewBooking" asp-route-pg="@(pager.CurrentPage - 1)">Previouse</a>
                    </li>
                }
                @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
                {
                    <li class="page-item @(pge == pager.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-controller="BookingUser" asp-action="ViewBooking" asp-route-pg="@pge">@pge</a>
                    </li>
                }
                @if (pager.CurrentPage < pager.TotalPages)
                {
                    <li class="page-Item">
                        <a class="page-link" asp-controller="BookingUser" asp-action="ViewBooking" asp-route-pg="@(pager.CurrentPage + 1)">Next</a>
                    </li>
                    <li>
                        <a class="page-link" asp-controller="BookingUser" asp-action="ViewBooking" asp-route-pg="@(pager.TotalPages)">Last</a>
                    </li>
                }
            </ul>
        }
        <div />
</div>


@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        // Load Modals on "Edit" button click
        $(document).on("click", ".loadEditBookingModal", function () {
            var bookingId = $(this).data("booking-id"); // Get the BookingId from the button

            // Fetch the modal content using an AJAX request
            $.get('@Url.Action("EditBookingModal", "BookingUser")', { bookingId: bookingId }, function (data) {
                $("#bookingModalContainer").html(data); // Load modal content into the container
                var modalElement = document.getElementById('editBookingModal'); // Ensure the modal ID matches
                var modal = new bootstrap.Modal(modalElement);
                modal.show(); // Show the modal

                // After loading the modal, set up the form (populate start and end times)
                setupBookingForm(); // Call the function to populate start and end times
            });
        });

        $(document).on("click", ".loadDeleteBookingModal", function () {
            var bookingId = $(this).data("booking-id"); // Get the booking ID from the button
            $.get('@Url.Action("DeleteBookingModal", "BookingUser")', { bookingId: bookingId }, function (data) {
                $("#bookingModalContainer").html(data); // Load the modal content
                var modalElement = document.getElementById('deleteBookingModal');
                var modal = new bootstrap.Modal(modalElement);
                modal.show(); // Show the modal
            });
        });


        // AJAX form submission for Edit Booking
        $(document).on("submit", "#editBookingForm", function (event) {
            event.preventDefault();  // Prevent the default form submission

            // Serialize the form data
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Edit", "BookingUser")', // URL to the Edit method in the controller
                type: 'POST',  // POST method
                data: formData,  // Send serialized form data
                success: function (response) {
                    // Check the response object
                    if (response.success) {
                        toastr.success(response.message);  // Show success message using toastr
                        $('#editBookingModal').modal('hide');  // Close the modal after success
                        location.reload();  // Reload the page to reflect the updated booking
                    } else {
                        toastr.error(response.message);  // Show error message using toastr
                    }
                },
                error: function () {
                    toastr.error("An unexpected error occurred.");  // Show a generic error if the request fails
                }
            });
        });

        // AJAX form submission for Delete booking
        $(document).on("submit", "#deleteBookingForm", function (event) {
            event.preventDefault(); // Prevent the default form submission

            $.ajax({
                url: '@Url.Action("SoftDelete", "BookingUser")', // Soft delete action
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message); // Show success message
                        $('#deleteBookingModal').modal('hide'); // Hide the modal
                        location.reload(); // Refresh the page or update the list dynamically
                    } else {
                        toastr.error(response.message); // Show error message
                    }
                },
                error: function () {
                    toastr.error("An unexpected error occurred.");
                }
            });
        });

        // Display success/error messages from TempData if available
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }

        function setupBookingForm() {
            const startDateField = document.getElementById('startDate');
            const startTimeDropdown = document.getElementById('startTime');
            const endTimeDropdown = document.getElementById('endTime');

            // Set today's date for the Start Date and prevent past dates
            const today = new Date().toISOString().split('T')[0];
            startDateField.value = today;
            startDateField.min = today;

            // Populate both Start Time and End Time dropdowns (8:00 AM to 6:00 PM with 30 min intervals)
            populateTimeDropdowns(startTimeDropdown, endTimeDropdown);

            // Add event listeners to validate end time whenever start or end time changes
            startTimeDropdown.addEventListener('change', () => validateEndTime(startTimeDropdown, endTimeDropdown));
            endTimeDropdown.addEventListener('change', () => validateEndTime(startTimeDropdown, endTimeDropdown));
        }

        // Function to populate the dropdowns with times from 8:00 AM to 6:00 PM (30 min increments)
        function populateTimeDropdowns(startTimeDropdown, endTimeDropdown) {
            const timeOptions = generateTimeOptions(8, 18);
            const optionsHtml = timeOptions.map(time => `<option value="${time}">${time}</option>`).join('');

            startTimeDropdown.innerHTML += optionsHtml;
            endTimeDropdown.innerHTML += optionsHtml;
        }

        // Function to generate time options from a start hour to end hour with 30 minute intervals
        function generateTimeOptions(startHour, endHour) {
            const options = [];
            for (let hour = startHour; hour <= endHour; hour++) {
                for (const minute of [0, 30]) {
                    if (hour === 18 && minute === 30) break; // Avoid 18:30
                    options.push(formatTime(hour, minute));
                }
            }
            return options;
        }

        // Function to format hour and minute into 'HH:mm' format
        function formatTime(hour, minute) {
            return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        }

        // Function to validate that the End Time is greater than Start Time
        function validateEndTime(startTimeDropdown, endTimeDropdown) {
            const startTime = startTimeDropdown.value;
            const endTime = endTimeDropdown.value;

            if (!startTime || !endTime) return; // If any value is empty, do nothing

            const startTimeInMinutes = convertToMinutes(startTime);
            const endTimeInMinutes = convertToMinutes(endTime);

            // If Start Time and End Time are the same or End Time is not greater than Start Time
            if (startTime === endTime) {
                alert('Start time and End time cannot be the same.');
                resetDropdownsToPlaceholder(startTimeDropdown, endTimeDropdown);
            } else if (endTimeInMinutes <= startTimeInMinutes) {
                alert('End time must be greater than start time.');
                resetDropdownsToPlaceholder(startTimeDropdown, endTimeDropdown);
            }
        }

        // Function to reset dropdown values to placeholder
        function resetDropdownsToPlaceholder(startTimeDropdown, endTimeDropdown) {
            startTimeDropdown.value = ""; // Reset Start Time to placeholder
            endTimeDropdown.value = "";  // Reset End Time to placeholder
        }

        // Function to convert 'HH:mm' time format to total minutes
        function convertToMinutes(time) {
            const [hours, minutes] = time.split(':').map(Number);
            return hours * 60 + minutes;
        }

       
    </script>
}


