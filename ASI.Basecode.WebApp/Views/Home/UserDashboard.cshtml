@model IEnumerable<ASI.Basecode.Services.ServiceModels.RoomViewModel>

@{
    ViewData["Title"] = "User Dashboard";

    Pager pager = new Pager();

    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }

}

<link href="~/css/dashboards.css" rel="stylesheet" />

<div class="list-container">

    <!-- Heading -->
    <div class="header d-flex align-items-center">
        <h1 class="title">Room List</h1>
    </div>

    <!-- Placeholder for the modal content -->
    <div id="bookingModalContainer"></div>

    <!-- Room List Table -->
    <div class="list-table">
        <div class="table-header-3">
            <span>Room Name</span>
            <span>Capacity</span>
            <span>Equipments</span>
            <span>Actions</span>
        </div>

        <div class="table-body-3">
            @if (Model != null && Model.Any())
            {
                foreach (var item in Model)
                {
                    <div class="table-row-3">
                        <span>@item.RoomName</span>
                        <span>@item.Capacity</span>
                        <span>@item.Equipment</span>

                        <div class="actions-2">
                            <!-- Book Button -->
                            <button type="button"
                                    class="btn btn-primary loadCreateBookingModal"
                                    data-room-id="@item.Id"
                                    style="background-color: #FFDBB5; color: black; font-weight: bold; padding: 8px 16px; border: none; border-radius: 5px; transition: background-color 0.3s ease;">
                                <i class="bi bi-calendar"></i> Book
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-item text-center">No rooms available.</div>
            }
        </div>
        <div class="pagination">
            @if (pager.TotalPages > 0)
            {
                <ul class="pagination justify-content-end">
                    @if (pager.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="UserDashboard" asp-route-pg="1">First</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="UserDashboard" asp-route-pg="@(pager.CurrentPage - 1)">Previous</a>
                        </li>
                    }
                    @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
                    {
                        <li class="page-item @(pge == pager.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-controller="Home" asp-action="UserDashboard" asp-route-pg="@pge">@pge</a>
                        </li>
                    }
                    @if (pager.CurrentPage < pager.TotalPages)
                    {
                        <li class="page-Item">
                            <a class="page-link" asp-controller="Home" asp-action="UserDashboard" asp-route-pg="@(pager.CurrentPage + 1)">Next</a>
                        </li>
                        <li>
                            <a class="page-link" asp-controller="Home" asp-action="UserDashboard" asp-route-pg="@(pager.TotalPages)">Last</a>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>



@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        // Load Modals on "Book" button click
        $(document).on("click", ".loadCreateBookingModal", function () {
            var roomId = $(this).data("room-id"); // Get the RoomId from the button

            // Fetch the modal content using an AJAX request
            $.get('@Url.Action("CreateBookingModal", "BookingUser")', { roomId: roomId }, function (data) {
                $("#bookingModalContainer").html(data); // Load modal content into the container

                var modalElement = document.getElementById('createBookingModal'); // Ensure the modal ID matches
                if (!modalElement) {
                    console.error("Modal element not found");
                    return;
                }

                var modal = new bootstrap.Modal(modalElement);
                modal.show(); // Show the modal

                // After loading the modal, set up the form (populate start and end times)
                setupBookingForm(); // Call the function to populate start and end times
            });
        });


        // AJAX form submission for Create Booking
        $(document).on("submit", "#createBookingForm", function (event) {
            event.preventDefault();

            $.ajax({
                url: '@Url.Action("Create", "BookingUser")',
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message); // Display success toastr
                        $('#createBookingModal').modal('hide');
                        location.reload(); // Reload the page to reflect the changes
                    } else {
                        toastr.error(response.message); // Display error toastr
                    }
                },
                error: function () {
                    toastr.error("An unexpected error occurred."); // Display general error toastr
                }
            });
        });


        // Function to setup the booking form with validations
        function setupBookingForm() {
            const startDateField = document.getElementById('startDate');
            const startTimeDropdown = document.getElementById('startTime');
            const endTimeDropdown = document.getElementById('endTime');

            // Set today's date for the Start Date and prevent past dates
            const today = new Date().toISOString().split('T')[0];
            startDateField.value = today;
            startDateField.min = today;

            // Populate both Start Time and End Time dropdowns (8:00 AM to 6:00 PM with 30 min intervals)
            populateTimeDropdowns(startTimeDropdown, endTimeDropdown);

            // Add event listeners to validate end time whenever start or end time changes
            startTimeDropdown.addEventListener('change', () => validateEndTime(startTimeDropdown, endTimeDropdown));
            endTimeDropdown.addEventListener('change', () => validateEndTime(startTimeDropdown, endTimeDropdown));
        }


        // Time and validation utilities
        function populateTimeDropdowns(startTimeDropdown, endTimeDropdown) {
            const timeOptions = generateTimeOptions(8, 18);
            const optionsHtml = timeOptions.map(time => `<option value="${time}">${time}</option>`).join('');

            startTimeDropdown.innerHTML += optionsHtml;
            endTimeDropdown.innerHTML += optionsHtml;
        }

        function generateTimeOptions(startHour, endHour) {
            const options = [];
            for (let hour = startHour; hour <= endHour; hour++) {
                for (const minute of [0, 30]) {
                    if (hour === 18 && minute === 30) break; // Avoid 18:30
                    options.push(formatTime(hour, minute));
                }
            }
            return options;
        }

        function formatTime(hour, minute) {
            return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        }

        function validateEndTime(startTimeDropdown, endTimeDropdown) {
            const startTime = startTimeDropdown.value;
            const endTime = endTimeDropdown.value;

            if (!startTime || !endTime) return;

            const startTimeInMinutes = convertToMinutes(startTime);
            const endTimeInMinutes = convertToMinutes(endTime);

            if (endTimeInMinutes <= startTimeInMinutes) {
                toastr.error('End time must be greater than start time.');
                resetDropdownsToPlaceholder(startTimeDropdown, endTimeDropdown);
            }
        }

        function convertToMinutes(time) {
            const [hours, minutes] = time.split(':').map(Number);
            return hours * 60 + minutes;
        }

        function resetDropdownsToPlaceholder(startTimeDropdown, endTimeDropdown) {
            startTimeDropdown.value = "";
            endTimeDropdown.value = "";
        }

        // Display success/error messages from TempData if available
        var successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }
    </script>
}
